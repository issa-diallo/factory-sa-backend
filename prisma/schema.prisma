datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}


model Company {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyDomains CompanyDomain[]
  roles          Role[]
  userRoles      UserRole[]
}


model CompanyDomain {
  id        String   @id @default(uuid())
  companyId String
  domainId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
  domain  Domain  @relation(fields: [domainId], references: [id])

  @@unique([companyId, domainId])
}


model Domain {
  id        String   @id @default(uuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyDomains CompanyDomain[]
}


model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
}


model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  companyId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company         Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[]
  userRoles       UserRole[]
}


model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  // 
  @@unique([roleId, permissionId])
}


model Session {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}


model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  firstName    String?
  lastName     String?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  lastLoginIp  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  userRoles UserRole[]
  sessions  Session[]
}


model UserRole {
  id        String   @id @default(uuid())
  userId    String
  companyId String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])

  @@unique([userId, companyId])
}
